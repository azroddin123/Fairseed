class CampaignDetailApi(APIView):
    def get(self, request):
        campaign_raised = Campaign.objects.annotate(user_count=Count('user'))
        total_user_count = campaign_raised.aggregate(causes_raised=Count('user'))['causes_raised']

        campaign_fund_raised = Campaign.objects.annotate(total_fund_raised=Sum('fund_raised'))
        total_fund_raised = campaign_fund_raised.aggregate(sum_fund=Sum('total_fund_raised'))['sum_fund']

        total_donor = Donor.objects.count()

        total_donor_amount = Donor.objects.annotate(total_f=Sum('amount'))
        total_f = total_donor_amount.aggregate(sum_f=Sum('total_f'))['sum_f']
        print(total_f)

        # Successful campaign status
        camp_status = False
        cam_model = Campaign.objects.all()
        for cam in cam_model:
            if cam.fund_raised == total_donor_amount:
                camp_status = True

        # Successful campaign count
        cam_model:Campaign = Campaign.objects.all()
        successful_cam = 0
        for camp in cam_model:
            print(type(camp.fund_raised))
            print(type(camp.goal_amount))
            print(camp.fund_raised)
            print(camp.goal_amount)
            # print(camp.fund_raised == )
            if camp.fund_raised == camp.goal_amount:
                successful_cam += 1
        print(camp.goal_amount)

        #Successful Student Count 
        # cam_cat:CampaignCatagories = CampaignCatagories.objects.all()
        # suc_std = 0
        # cam_cat = CampaignCatagories.objects.filter(name='Education')
        # for c in cam_cat:
        #     if c.fund_raised >= c.goal_amount:
        #         suc_std += 1

        return Response({
            'causes_raised': total_user_count,
            'fund_raised': total_fund_raised,
            'donor_total': total_donor,
            'sum123': total_f,
            'successful_campaign': camp_status,
            'success_cam': successful_cam,
            # 'std_student': suc_std
        },
            status=status.HTTP_200_OK)





Another one tral......
class CampaignDetailApi(APIView):
    def get(self , request):
        campaign_raised = Campaign.objects.annotate(user_count=Count('user'))
        total_user_count = campaign_raised.aggregate(causes_raised=Count('user'))['causes_raised']

        campaign_fund_raised = Campaign.objects.annotate(total_fund_raised=Sum('fund_raised'))
        total_fund_raised = campaign_fund_raised.aggregate(sum_fund=Sum('total_fund_raised'))['sum_fund']

        total_donor = Donor.objects.count()

        total_donor_amount = Donor.objects.annotate(total_f=Sum('amount'))
        total_f = total_donor_amount.aggregate(sum_f=Sum('total_f'))['sum_f']
        print(total_f)

        # Successful campaign status
        camp_status = False
        cam_model = Campaign.objects.all()
        for cam in cam_model:
            if(cam.fund_raised==total_donor_amount):
                camp_status = True


        if [(total_fund_raised==total_f) or (total_f > total_fund_raised)]:
            success_cam = False
        
        # Successful campaign count
        cam_model = Campaign.objects.all()
        successful_cam = 0
        for camp in cam_model:
            print("in for")
            if camp.fund_raised == cam.goal_amount:
                print("If condition")
                successful_cam +=1
        print(cam.goal_amount)


        return Response({
            'causes_raised': total_user_count,
            'fund_raised': total_fund_raised, 
            'donor_total': total_donor,
            'sum123' : total_f,
            'successful_campaign':success_cam,
            'success_cam' : successful_cam,
            'One_cam_status': camp_status
            }, 
            status=status.HTTP_200_OK)




class CapmPaginationApi(APIView):
    def get(self, request):
        # oc1=Campaign.objects.all()
        # p=Paginator(oc1,8)
        # page_number=request.GET.get("page")
        # page_object = p.get_page(page_number)
        # camp= get_object_or_404(Campaign)
        # title = camp.title
        # return Response({"Title":title}, status=status.HTTP_200_OK)
        camp = Campaign.objects.all()


#### Running code for Title #####

class CapmPaginationApi(APIView):
    def get(self, request):
        camp = Campaign.objects.all()
        all_titles = Campaign.objects.values_list('title', flat=True)
        page_size = 2
        page_number = int(request.GET.get("page", 2))

        try:
            # Create a paginator instance
            paginator = Paginator(all_titles, page_size)

            # Get the specified page from the paginator
            paginated_titles = paginator.page(page_number)

            # Your custom logic for creating the response
            response_data = {
                "Title": list(paginated_titles),
                "TotalPages": paginator.num_pages,
                "CurrentPage": page_number,
                "ItemsPerPage": page_size,
            }

            return Response(response_data, status=status.HTTP_200_OK)

        except EmptyPage:
            # If the page is out of range, return an empty list
            return Response({"Title": []}, status=status.HTTP_200_OK)

################ Getting Title and image of one card when created one folder and with long image path ###############

class CampaignCategoryCausesAPI(APIView):
    def get(self, request, pk):
        camp= get_object_or_404(Campaign, pk=pk)
        try:
            with open(camp.image.path, 'rb') as image_file:
                encoded_image = base64.b64encode(image_file.read()).decode('utf-8')
        except FileNotFoundError:
            encoded_image = None
        s1={
            "title":camp.title,
            "image": encoded_image,
        }
        return Response(s1, status=status.HTTP_200_OK)



############### Successfull Campaign Code BY SIR ################

  # cam_model:Campaign = Campaign.objects.all()
        # successful_cam = 0
        # for camp in cam_model:
        #     print(type(camp.fund_raised))
        #     print(type(camp.goal_amount))
        #     print(camp.fund_raised)
        #     print(camp.goal_amount)
        #     # print(camp.fund_raised == )
        #     if camp.fund_raised == camp.goal_amount:
        #         successful_cam += 1
        # print(camp.goal_amount)